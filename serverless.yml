service: scenestudybuddy
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'scenestudybuddy'}
  region: eu-west-2
  profile: vernecorptechnologies
  # environment:
  #   user_pool_id: { Ref: CognitoUserPool }
  #   client_id: { Ref: CognitoUserPoolClient }
  # iamRoleStatements:
  #   - Effect: Allow
  #     Action:
  #       - cognito-idp:AdminInitiateAuth
  #       - cognito-idp:AdminCreateUser
  #       - cognito-idp:AdminSetUserPassword
  #     Resource: "*"
  #   - Effect: Allow
  #     Action:
  #       - lambda:InvokeFunction
  #     Resource: "*"
  #   - Effect: Allow
  #     Action:
  #       - s3:PutBucketPolicy
  #     Resource: "arn:aws:s3:::${self:provider.stage}-ui/*" 
# plugins:
#   - serverless-webpack
#   - serverless-s3-deploy

# custom:
#   region: eu-west-2
#   s3Deploy:
#     buckets:
#       - name: ${self:provider.stage}-ui

# functions:
#   loginUser:
#     handler: server/handlers/cognito/loginUser.handler
#     iamRoleStatements:
#       - Effect: Allow
#         Action:
#           - lambda:InvokeFunction
#         Resource: "*"
#         Role:
#           Fn::GetAtt:
#             - LambdaExecutionRole
#             - Arn
#   registerUser:
#     handler: server/handlers/cognito/registerUser.handler
#     iamRoleStatements:
#       - Effect: Allow
#         Action:
#           - lambda:InvokeFunction
#         Resource: "*"
#         Role:
#           Fn::GetAtt:
#             - LambdaExecutionRole
#             - Arn
#   authorizeUser:
#     handler: server/handlers/cognito/authorizeUser.handler
#     iamRoleStatements:
#       - Effect: Allow
#         Action:
#           - lambda:InvokeFunction
#         Resource: "*"
#         Role:
#           Fn::GetAtt:
#             - LambdaExecutionRole
#             - Arn
#   resendVerificationCode:
#     handler: server/handlers/cognito/resendVerificationCode.handler
#     iamRoleStatements:
#       - Effect: Allow
#         Action:
#           - lambda:InvokeFunction
#         Resource: "*"
#         Role:
#           Fn::GetAtt:
#             - LambdaExecutionRole
#             - Arn
#   forgotPassword:
#     handler: server/handlers/cognito/forgotPassword.handler
#     iamRoleStatements:
#       - Effect: Allow
#         Action:
#           - lambda:InvokeFunction
#         Resource: "*"
#         Role:
#           Fn::GetAtt:
#             - LambdaExecutionRole
#             - Arn
#   resetPassword:
#     handler: server/handlers/cognito/resetPassword.handler
#     iamRoleStatements:
#       - Effect: Allow
#         Action:
#           - lambda:InvokeFunction
#         Resource: "*"
#         Role:
#           Fn::GetAtt:
#             - LambdaExecutionRole
#             - Arn
#   logoutUser:
#     handler: server/handlers/cognito/logoutUser.handler
#     iamRoleStatements:
#       - Effect: Allow
#         Action:
#           - lambda:InvokeFunction
#         Resource: "*"
#         Role:
#           Fn::GetAtt:
#             - LambdaExecutionRole
#             - Arn

# resources:
#   Resources:
#     S3Bucket:
#       Type: AWS::S3::Bucket
#       Properties:
#         BucketName: ${self:provider.stage}-ui
#         WebsiteConfiguration:
#           IndexDocument: index.html
#           ErrorDocument: index.html
#     S3BucketPolicy:
#       Type: AWS::S3::BucketPolicy
#       Properties:
#         Bucket:
#           Ref: S3Bucket
#         PolicyDocument:
#           Statement:
#             - Sid: PublicReadGetObject
#               Effect: Allow
#               Principal: "*"
#               Action:
#               - s3:GetObject
#               Resource: arn:aws:s3:::${self:provider.stage}-ui/*
#     CloudFrontDistribution:
#       Type: AWS::CloudFront::Distribution
#       Properties:
#         DistributionConfig:
#           Origins:
#             - DomainName: ${self:provider.stage}.s3.amazonaws.com
#               Id: scenestudybuddy
#               CustomOriginConfig:
#                 HTTPPort: 80
#                 HTTPSPort: 443
#                 OriginProtocolPolicy: https-only
#           Enabled: 'true'
#           DefaultRootObject: index.html
#           CustomErrorResponses:
#             - ErrorCode: 404
#               ResponseCode: 200
#               ResponsePagePath: /index.html
#           DefaultCacheBehavior:
#             AllowedMethods:
#               - DELETE
#               - GET
#               - HEAD
#               - OPTIONS
#               - PATCH
#               - POST
#               - PUT
#             TargetOriginId: scenestudybuddy
#             ForwardedValues:
#               QueryString: 'false'
#               Cookies:
#                 Forward: none
#             ViewerProtocolPolicy: redirect-to-https
#           ViewerCertificate:
#             CloudFrontDefaultCertificate: 'true'

#     CognitoUserPool:
#       Type: AWS::Cognito::UserPool
#       Properties:
#         UserPoolName: ${self:provider.stage}-user-pool
#         UsernameAttributes:
#             - email
#         AutoVerifiedAttributes:
#             - email
#         Schema:
#           - Name: email
#             AttributeDataType: String
#             Mutable: false
#           - Name: password
#             AttributeDataType: String
#             Mutable: true
#     CognitoUserPoolClient:
#       Type: AWS::Cognito::UserPoolClient
#       Properties:
#         ClientName: ${self:provider.stage}-user-pool-client
#         UserPoolId:
#             Ref: CognitoUserPool
#         ExplicitAuthFlows:
#           - ALLOW_USER_SRP_AUTH
#           - ALLOW_REFRESH_TOKEN_AUTH
#           - ALLOW_USER_PASSWORD_AUTH
#         GenerateSecret: false
    # LambdaExecutionRole:
    #   Type: AWS::IAM::Role
    #   Properties:
    #     RoleName: lambda-execution-role
    #     AssumeRolePolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #         - Effect: Allow
    #           Principal:
    #             Service:
    #               - lambda.amazonaws.com
    #           Action: sts:AssumeRole
    #     ManagedPolicyArns:
    #       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole    

